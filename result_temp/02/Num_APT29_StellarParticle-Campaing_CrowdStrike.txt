0: StellarParticle Campaign: Novel Tactics and Techniques
1: crowdstrike.com/blog/observations-from-the-stellarparticle-campaign/
2: CrowdStrike Services - CrowdStrike Intelligence
3: January 27, 2022
4: StellarParticle is a campaign tracked by CrowdStrike as related to the SUNSPOT implantfrom the SolarWinds intrusion in December 2020 and associated with COZY BEAR (akaAPT29, “The Dukes”).
5: The StellarParticle campaign has continued against multiple organizations, with COZYBEAR using novel tools and techniques to complete their objectives, as identified byCrowdStrike incident responders and the CrowdStrike Intelligence team.Browser cookie theft and Microsoft Service Principal manipulation are two of the noveltechniques and tools leveraged in the StellarParticle campaign and are discussed in thisblog.Two sophisticated malware families were placed on victim systems in mid-2019: a Linuxvariant of GoldMax and a new implant dubbed TrailBlazer.
6: Supply chain compromises are an increasing threat that impacts a range of sectors, withthreat actors leveraging access to support several motivations including financial gain (suchas with the Kaseya ransomware attack) and espionage.
7: Throughout 2020, an operationattributed to the Foreign Intelligence Service of the Russian Federation (SVR) by the U.S.government was conducted to gain access to the update mechanism of the SolarWinds ITmanagement software and use it to broaden their intelligence collection capabilities.
8: Thisactivity is tracked by CrowdStrike as the StellarParticle campaign and is associated with theCOZY BEAR adversary group.
9: This blog discusses the novel tactics and techniques leveraged in StellarParticle investigationsconducted by CrowdStrike.
10: These techniques include:
11: Credential hopping for obscuring lateral movementOffice 365 (O365) Service Principal and Application hijacking, impersonation andmanipulationStealing browser cookies for bypassing multifactor authenticationUse of the TrailBlazer implant and the Linux variant of GoldMax malwareCredential theft using Get-ADReplAccount
12: Credential Hopping
13: The majority of StellarParticle-related investigations conducted by CrowdStrike have startedwith the identification of adversary actions within a victim’s O365 environment.
14: This has beenadvantageous to CrowdStrike incident responders in that, through investigating victim O365environments, they could gain an accurate accounting of time, account and source IP addressof adversary victimization of the O365 tenant.
15: In multiple engagements, this led CrowdStrikeincident responders to identify that the malicious authentications into victim O365 tenants hadoriginated from within the victim’s own network.
16: Armed with this information, CrowdStrike investigators were able to identify from whichsystems in these internal networks the threat actor was making authentications to O365.These authentications would typically occur from servers in the environment, leading tonatural investigative questions: Why would a user authenticate into O365 from a domaincontroller or other infrastructure server?
17: What credentials were used as part of the sessionfrom which the O365 authentication occurred?
18: This led our responders to identify the occurrence of “credential hopping,” where the threatactor leveraged different credentials for each step while moving laterally through the victim’snetwork.
19: While this particular technique is not necessarily unique to the StellarParticlecampaign, it indicates a more advanced threat actor and may go unnoticed by a victim.
20: Below is an example of how a threat actor performs credential hopping:
21: Gain access to the victim’s network by logging into a public-facing system via SecureShell (SSH) using a local account <user sftp> acquired during previous credential theftactivities.Use port forwarding capabilities built into SSH on the public-facing system to establish aRemote Desktop Protocol (RDP) session to an internal server (Server 1) using a domainservice account.From Server 1, establish another RDP session to a different internal server (Server 2)using a domain administrator’s account.Log in to O365 as a user with privileged access to cloud resources.
22: Figure 1.
23: Example of “credential hopping” technique
24: This technique could be hard to identify in environments where defenders have little visibilityinto identity usage.
25: In the example shown in Figure 1, the threat actor leveraged a serviceinteractively, which should generate detections for defenders to investigate.
26: However, thethreat actor could have easily used a second domain administrator account or any othercombination of accounts that would not be easily detected.
27: A solution such as CrowdStrikeFalcon® Identity Threat Detection would help identify these anomalous logons — andespecially infrequent destinations for accounts.
28: (Read how CrowdStrike incident respondersleverage the module in investigations in this blog: Credentials, Authentications and Hygiene:Supercharging Incident Response with Falcon Identity Threat Detection.)
29: But how had the threat actor succeeded in authenticating into victim O365 tenants, whenmultifactor authentication (MFA) had been enabled for every O365 user account at each victimorganization investigated by CrowdStrike?
30: Cookie Theft to Bypass MFA
31: Even though the victims required MFA to access cloud resources from all locations, includingon premises, the threat actor managed to bypass MFA through the theft of Chrome browsercookies.
32: The threat actor accomplished this by using administrative accounts to connect viaSMB to targeted users, and then copy their Chrome profile directories as well as dataprotection API (DPAPI) data.
33: In Windows, Chrome cookies and saved passwords areencrypted using DPAPI.
34: The user-specific encryption keys for DPAPI are stored underC:\Users\<user>\AppData\Roaming\Microsoft\Protect\ .
35: To leverage these encryptionkeys, the threat actor must first decrypt them, either by using the user account’s Windowspassword, or, in Active Directory environments, by using a DPAPI domain backup key that isstored on domain controllers.
36: Once the threat actor had a Chrome cookies file from a user that had already passed an MFAchallenge recently (for example, a timeout was 24 hours), they decrypted the cookies fileusing the user’s DPAPI key.
37: The cookies were then added to a new session using a “CookieEditor” Chrome extension that the threat actor installed on victim systems and removed afterusing.
38: Shellbags, Falcon Telemetry and RDP Bitmap Cache
39: From a forensic standpoint, the use of the Cookie Editor Chrome extension would have beenchallenging to identify, due to the threat actor’s penchant for strict operational security.
40: Thisactivity was identified via a  NewScriptWritten  event within Falcon when a JavaScript filewas written to disk by a threat actor-initiated Chrome process.
41: This event captured the uniqueextension ID associated with the extension, thereby allowing CrowdStrike incident respondersto validate via the Chrome Store that the JavaScript file was associated with the “CookieEditor” plugin.
42: This extension permitted bypassing MFA requirements, as the cookies,replayed through the Cookie Editor extension, allowed the threat actor to hijack the alreadyMFA-approved session of a targeted user.
43: Shellbags were also instrumental in identifying the cookie theft activity.
44: This artifact veryclearly showed the threat actor accessing targeted users’ machines in sequence and browsingto the Chrome and DPAPI directories one after another.
45: Parsing Shellbags for anadministrative account leveraged by the threat actor resulted in entries similar to the below.
46: Figure 2.
47: Shellbag artifacts showing targeting of Chrome directories
48: CrowdStrike identified forensic evidence that showed the entire attack path: browsing to atarget user’s Chrome and DPAPI directories via administrative share, installing the CookieEditor extension, and using Chrome to impersonate the targeted user in the victim’s cloudtenants.
49: The decryption of the cookies is believed to have taken place offline after exfiltratingthe data via the clipboard in the threat actor’s RDP session.
50: Figure 3.
51: Representation of lateral movement to cookie theft to O365 authentication
52: CrowdStrike identified a similar TTP where the threat actor connected via RDP to a user’sworkstation with the workstation owner’s account (e.g., connecting via RDP to user1-pc usingthe account user1).
53: In cases where the user had only locked their screen and not signed out,the threat actor was able to take over the user’s Windows session, as the RDP session wouldconnect to the existing session of the same user.
54: By examining RDP Bitmap Cache files,CrowdStrike was able to demonstrate that the threat actor had opened Chrome and exportedall of the user’s saved passwords as plaintext in a CSV file during these sessions.
55: Figure 4.
56: RDP Bitmap Cache reconstruction showing exportation ofChrome passwords
57: In addition, the threat actor visited sensitive websites that the user had access to, which in oneinstance allowed them to browse and download a victim’s customer list.
58: After this, the threatactor navigated to the user’s Chrome history page and deleted the specific history itemsrelated to threat actor activity, leaving the rest of the user’s Chrome history intact.
59: O365 Delegated Administrator Abuse
60: CrowdStrike also identified a connection between StellarParticle-related campaigns and theabuse of Microsoft Cloud Solution Partners’ O365 tenants.
61: This threat actor abused access toaccounts in the Cloud Solution Partner’s environment with legitimate delegated administrativeprivileges to then gain access to several customers’ O365 environments.
62: By analyzing Azure AD sign-ins, CrowdStrike was able to use known indicators of compromise(IOCs) to identify several threat actor logins to customer environments.
63: These cross-tenantsign-ins were identified by looking for values in the  resourceTenantId  attribute that did notmatch the Cloud Solution Partner’s own Azure tenant ID.
64: CrowdStrike also identified a limitation within Microsoft’s Delegated Administration capabilitiesfor Microsoft Cloud Solution Partners.
65: While a normal O365 administrator can be provideddozens of specific administrative roles to limit the privileges granted, this same degree ofcustomization cannot be applied to Microsoft Cloud Solution Partners that use the delegatedadministrator functionality in O365.
66: For Microsoft Cloud Solution Partners, there are only two substantial administrative optionstoday when managing a customer’s environment,  Admin agent  or  Helpdesk agent .
67: TheHelpdesk agent  role provides very limited access that is equivalent to a password adminrole, whereas the  Admin agent  role provides broad access more equivalent to globaladministrator.
68: This limitation is scheduled to be resolved in 2022 via Microsoft’s scheduled3feature, Granular Delegated Admin Privileges (GDAP).
69: User Access Logging (UAL)
70: The Windows User Access Logging (UAL) database is an extremely powerful artifact that hasplayed an instrumental role in the investigation of StellarParticle-linked cases.
71: In particular,UAL has helped our responders identify earlier malicious account usage that ultimately led tothe identification of the aforementioned TrailBlazer implant and Linux version of the GoldMaxvariant.
72: The UAL database is available by default on Server editions of Windows starting with Server2012.
73: This database stores historical information on user access to various services (or inWindows parlance, Roles) on the server for up to three years (three years minus one day) bydefault.
74: UAL contains information on the type of service accessed, the user that accessed theservice and the source IP address from which the access occurred.
75: One of the most usefulroles recorded by UAL is the File Server role, which includes SMB access, though other roletypes can also be very helpful.
76: An overview of UAL, what information it contains and how itcan be leveraged in forensic investigations can be found here.
77: In multiple StellarParticle-related cases, because the threat actor used the same set ofaccounts during their operations in the environment, CrowdStrike was able to identify previousmalicious activity going back multiple years, based solely on UAL data.
78: Even though it’s onlyavailable on Server 2012 and up, UAL can still be used to trace evidence of threat actoractivity on legacy systems as long as the activity on the legacy system involves some(deliberate or unintentional) access to a 2012+ system.
79: For example, in addition to trackingSMB activity, UAL databases on Domain Controllers track Active Directory access.
80: This allowed CrowdStrike to demonstrate that a given user account was also authenticating toActive Directory from a given source IP address two years prior.
81: Because the user accountwas known to have recently been abused by the threat actor, and the source IP of the systemin question was not one that account would typically be active on, the investigation led to thesource system and ultimately resulted in the timeline of malicious activity being pushed backby years, with additional compromised systems even being discovered still running uniquemalware from that time period.
82: TrailBlazer and GoldMax
83: Throughout StellarParticle-related investigations, CrowdStrike has identified two sophisticatedmalware families that were placed on victim systems in the mid-2019 timeframe: a Linuxvariant of GoldMax and a completely new family CrowdStrike refers to as TrailBlazer.
84: TrailBlazer
85: Attempted to blend in with a file name that matched the system name it resided onConfigured for WMI persistence (generally uncommon in 2019)Used likely compromised infrastructure for C2Masquerades its command-and-control (C2) traffic as legitimate Google NotificationsHTTP requests
86: TrailBlazer is a sophisticated malware family that provides modular functionality and a very lowprevalence.
87: The malware shares high-level functionality with other malware families.
88: Inparticular, the use of random identifier strings for C2 operations and result codes, andattempts to hide C2 communications in seemingly legitimate web traffic, were previously
89: observed tactics, techniques and procedures (TTPs) in GoldMax and SUNBURST.
90: TrailBlazerpersists on a compromised host using WMI event subscriptions  — a technique also used bySeaDuke — although this persistence mechanism is not exclusive to COZY BEAR.
91: WMI event filter
92: SELECT * FROM __InstanceModificationEvent WITHIN 60WHERE TargetInstance ISA'Win32_PerfFormattedData_PerfOS_System' ANDTargetInstance.SystemUpTime >= 180 ANDTargetInstance.SystemUpTime < 480
93: WMI Event consumer(CommandLineTemplate)
94: C:\Program Files (x86)\Common Files\Adobe\<FILENAME>.exe
95: Filter to consumerbinding
96: CommandLineEventConsumer.Name="<GUID1>"|__EventFilter.Name="<GUID2>"
97: Table 1.
98: TrailBlazer WMI Persistence
99: In the obfuscated example above, TrailBlazer ( <FILENAME> .exe ) would be executed whenthe system’s uptime was between 180 and 480 seconds.
100: GoldMax (Linux variant)
101: Attempted to blend in with a file name that matched the system name it resided onConfigured for persistence via a crontab entry with a  @reboot  line Used likely compromised infrastructure for C2
102: GoldMax was first observed during post-exploitation activity in the campaign leveraging theSolarWinds supply chain attacks.
103: Previously identified samples of GoldMax were built for theWindows platform, with the earliest identified timestamp indicating a compilation in May 2020,but a recent CrowdStrike investigation discovered a GoldMax variant built for the Linuxplatform that the threat actor deployed in mid-2019.
104: This variant extends the backdoor’sknown history and shows that the threat actor has used the malware in post-exploitation activity targeting other platforms than Windows.
105: The 2019 Linux variant of the GoldMax backdoor is almost identical in functionality andimplementation to the previously identified May 2020 Windows variant.
106: The very few additionsto the backdoor between 2019 and 2020 likely reflect its maturity and longstanding evasion ofdetections.
107: It is likely GoldMax has been used as a long-term persistence backdoor duringStellarParticle-related compromises, which would be consistent with the few changes made tothe malware to modify existing functions or support additional functionality.
108: Persistence was established via a crontab entry for a non-root user.
109: With the binary named tomasquerade as a legitimate file on the system and placed in a hidden directory, a crontabentry was created with a  @reboot  line so the GoldMax binary would execute again uponsystem reboot.
110: Additionally, the threat actor used the  nohup  command to ignore any hangupsignals, and the process will continue to run even if the terminal session was terminated.
111: Figure 5.
112: Crontab entry for GoldMax persistence
113: Enumeration Tools/Unique Directory Structure
114: Throughout our StellarParticle investigations, CrowdStrike identified what appeared to be aVBScript-based Active Directory enumeration toolkit.
115: While the script’s contents have not beenrecovered to date, CrowdStrike has observed identical artifacts across multiple StellarParticleengagements that suggest the same or similar tool was used.
116: In each instance the tool was used, Shellbags data indicated that directories with randomnames of a consistent length were navigated to by the same user that ran the tool.
117: After twolevels of randomly named directories, Shellbags proved the existence of subdirectories namedafter the FQDNs for the victims’ various domains.
118: In addition, the randomly named directoriesare typically created in a previously existing directory that’s one level off of the root of the Cdrive.
119: The randomly named directories have a consistent length where the first directory is sixcharacters and the next directory is three characters.
120: To date, the names of the directorieshave always been formed from lowercase alphanumeric characters.
121: For example, Shellbagsindicated that directories matching the naming patterns below were browsed to (where “XX” isa previously existing directory on the system):
122: C:\XX\[a-z0-9]{6}C:\XX\[a-z0-9]{6}\[a-z0-9]{3}C:\XX\[a-z0-9]{6}\[a-z0-9]{3}\domain.FQDNC:\XX\[a-z0-9]{6}\[a-z0-9]{3}\domain-2.FQDN
123: In each case, immediately prior to the creation of the directories referenced above, there wasevidence of execution of a VBScript file by the same user that browsed to the directories.
124: Thisevidence typically came from a UserAssist entry for wscript.exe, as well as RecentAppsentries for wscript.exe (that would also include the VBScript filename).
125: In addition, the JumpList for wscript.exe contained evidence of the VBScript files.
126: The name of the VBScript filesvaried across engagements and was generally designed to look fairly innocuous and blend in.Two examples are  env.vbs  and  WinNet.vbs .
127: Due to the subdirectories that are namedafter the FQDNs for victim domains, CrowdStrike assesses with moderate confidence that thescripts represent an AD enumeration tool used by the adversary.
128: Internal Wiki Access
129: Across multiple StellarParticle investigations, CrowdStrike identified unique reconnaissance6activities performed by the threat actor: access of victims’ internal knowledge repositories.Wikis are commonly used across industries to facilitate knowledge sharing and as a source ofreference for a variety of topics.
130: While operating in the victim’s internal network, the threatactor accessed sensitive information specific to the products and services that the victimorganization provided.
131: This information included items such as product/service architectureand design documents, vulnerabilities and step-by-step instructions to perform various tasks.Additionally, the threat actor viewed pages related to internal business operations such asdevelopment schedules and points of contact.
132: In some instances these points of contact weresubsequently targeted for further data collection.
133: The threat actor’s wiki access could be considered an extension of “Credential Hopping”described earlier.
134: The threat actor established RDP sessions to internal servers usingprivileged accounts and then accessed the wiki using a different set of credentials.
135: CrowdStrike observed the threat actor accessing the wiki as users who would be considered“non-privileged” from an Active Directory perspective but had access to sensitive data specificto the victim’s products or services.
136: At this time, the malicious access of internal wikis is an information gathering technique thatCrowdStrike has only observed in StellarParticle investigations.
137: CrowdStrike was able toidentify the wiki access primarily through forensic analysis of the internal systems used by thethreat actor.
138: Given the threat actor’s penchant for clearing browser data, organizations shouldnot rely upon the availability of these artifacts for future investigations.
139: CrowdStrikerecommends the following best practices for internal information repositories:
140: Enable detailed access logging Ensure logs are centralized and stored for at least 180 daysCreate detections for anomalous activity such as access from an unusual location like aserver subnetEnable MFA on the repository site, or provide access via Single Sign On (SSO) behindMFA
141: O365 Built-in Service Principal Hijacking
142: The threat actor connected via Remote Desktop from a Domain Controller to a vCenter serverand opened a PowerShell console, then used the PowerShell command  -ep bypass  tocircumvent the execution policy.
143: Using the Windows Azure Active Directory PowerShellModule, the threat actor connected to the victim’s O365 tenant and began performingenumeration queries.
144: These queries were recorded in text-based logs that existed under thepath
145: C:\Users\<user>\AppData\Local\Microsoft\Office365\Powershell\ .
146: Similar logs (for Azure AD instead of O365) can be found under the path:
147: C:\Users\<user>\AppData\Local\Microsoft\AzureAD\Powershell\ .
148: While the logs didn’t include what data was returned by the queries, they did provide someinsight such as the user account used to connect to the victim’s O365 tenant (which was notthe same as the user the threat actor used to RDP to the vCenter server).
149: The logs containedcommands issued and the count of the results returned for a specific command.
150: Thecommands included enumeration queries such as:
151: ListAccountSkusListPartnerContractsListServicePrincipalsListServicePrincipalCredentialsListRolesListRoleMembersListUsersListDomainsGetRoleMemberGetPartnerInformationGetCompanyInformation
152: In this case, however, the most significant and concerning log entry was one that indicated thecommand  AddServicePrincipalCredentials  was executed.
153: By taking the timestamp thatthe command was executed via the PowerShell logs on the local system, CrowdStrikeanalyzed the configuration settings in the victim’s O365 tenant and discovered that a newsecret had been added to a built-in Microsoft Azure AD Enterprise Application,  MicrosoftStaffHub  Service Principal, which had  Application  level permissions.
154: Further, the newlyadded secret was set to remain valid for more than a decade.
155: This data was acquired byexporting the secrets and certificates details for each Azure AD Enterprise Application.
156: The Service Principal (now renamed to  Microsoft Teams Shifts ) had the followingpermissions at the time the configuration settings were collected:
157: Member.ReadMember.Read.AllMember.ReadWriteMember.ReadWrite.AllShift.ReadShift.Read.AllShift.ReadWriteShift.ReadWrite.AllTeam.ReadTeam.Read.AllTeam.ReadWriteTeam.ReadWrite.AllUser.Read.AllUser.ReadWrite.AllWebHook.Read.AllWebHook.ReadWrite.All
158: CrowdStrike was unable to find Microsoft documentation, but based on open-sourceresearch,  this application likely had the following permissions around the time of registration:
159: Mail.ReadGroup.Read.AllFiles.Read.AllGroup.ReadWrite.All
160: The most notable permissions above are the  Mail.Read ,  Files.Read  andMember.ReadWrite   permissions.
161: These permissions would allow the threat actor to use theMicrosoft Staffhub  service principal to read all mail and SharePoint/OneDrive files in theorganization, as well as create new accounts and assign administrator privileges to anyaccount in the organization.
162: By running the commands from within the victim’s environment, MFA requirements werebypassed due to conditional access policies not covering Service Principal sign-ins at thispoint of time.
163: However, as explained earlier, the threat actor managed to continue to accessthe victim’s cloud environment even when the victim enforced MFA for all connectionsregardless of source.
164: 10/21
165: While the bulk of the evidence for this activity came from the text-based O365 PowerShelllogs, the  NTUSER.DAT  registry hive for the user that was running the PowerShell cmdlets alsoincluded information on the accounts that were used to authenticate to the cloud.
166: Thisinformation was stored under the registry path.
167: Below is an example of the registry data:
168: Figure 6.
169: Example registry entry showing target O365 email accounts
170: The same WSMan connection string was also located in the user’s  NTUSER.DAT  registryhive under the path:
171: Figure 7.
172: WSMan connection string registry location
173: While not strictly related to the O365 PowerShell activity, the Windows Event LogMicrosoft-Windows-WinRM%4Operational.evtx  also included information on connectionattempts made to external O365 tenants.
174: This information was logged under Event ID 6.Below is an example of what the event included:
175: Figure 8.
176: Windows Event Log entry showing connection to O365 tenants
177: O365 Company Service Principal Manipulation
178: The threat actor also deployed several layers of persistence utilizing both pre-existing andthreat actor-created Service Principals with the ultimate goal of gaining global access to email.
179: Attacker-created Service Principal
180: First, the threat actor used a compromised O365 administrator account to create a newService Principal with a generic name.
181: This Service Principal was granted  companyadministrator  privileges.
182: From there, the threat actor added a credential to this ServicePrincipal so that they could access the Service Principal directly, without use of an O365 useraccount.
183: These actions were recorded in Unified Audit Logs with the following three operation names:
184: Add service principalAdd member to roleAdd service principal credentials.Update Service Principal
185: Company-Created Service Principal Hijacking
186: 11/21
187: Next, the threat actor utilized the threat actor-created Service Principal to take control of asecond Service Principal.
188: This was done by adding credentials to this second ServicePrincipal, which was legitimately created by the company.
189: This now compromised company-created Service Principal had  mail.read  graph permissions consented on behalf of all userswithin the tenant.
190: This action was recorded by just one operation type in Unified Audit Logs.
191: This operation typeis named  Add service principal credentials .
192: Mail.Read Service Principal Abuse
193: Finally, the threat actor utilized the compromised Service Principal with the assigned mail.read  permissions to then read emails of several different users in the company’senvironment.
194: CrowdStrike was able to use the Unified Audit Logs’ (UAL)  MailItemsAccessed  operationevents to see the exact emails the threat actor viewed, as the majority of the users in thetenant were assigned O365 E5 licenses.
195: When performing analysis on the UAL, CrowdStrikeused the  ClientAppId  value within the  MailItemsAccessed  operation and cross-correlated with the Application ID of the compromised service principal to see what activitieswere performed by the threat actor.
196: O365 Application Impersonation
197: Another consistent TTP identified during StellarParticle investigations has been the abuse ofthe  ApplicationImpersonation  role.
198: When this role was assigned to a particular user thatwas controlled by the threat actor, it allowed the threat actor to impersonate any user withinthe O365 environment.
199: These impersonated events are not logged verbosely by the UnifiedAudit Logs and can be difficult to detect.
200: While the assignment of these  ApplicationImpersonation  roles were not logged in theUnified Audit Logs, CrowdStrike was able to identify this persistence mechanism via themanagement role configuration settings, which can be exported with the ExchangePowerShell command:
201: Get-ManagementRoleAssignment -Role ApplicationImpersonation .
202: CrowdStrike then analyzed the exported configuration settings and identified several users(not service accounts) that the threat actor likely gave direct  ApplicationImpersonationroles during the known periods of compromise.
203: Remote Tasklist
204: The threat actor attempted to remotely list running processes on systems usingtasklist.exe .
205: As tasklist uses WMI “under the hood,” this activity was captured by Falconas  SuspiciousWmiQuery  events that included the query and the source system.
206: Additionally,the failed (not successful) process listing resulted in a DCOM error that was logged in theSystem.evtx event log under Event ID 10028.
207: A sample of the information included with thisevent is below:
208: 12/21
209: Figure 9.
210: Event ID 10028 showing failed execution of remote tasklist
211: This remote process listing was consistently used by the threat actor targeting the same orsimilar lists of remote systems, and the owners of the targeted systems also happened to bethe individuals with cloud access that the threat actor was interested in.
212: While unproven, it’spossible the threat actor was running  tasklist  remotely on these systems specifically tosee which of the target systems was running Google Chrome.
213: This is because a current orrecent Chrome session to the victim’s cloud tenants would be potentially beneficial in thehijacking of sessions that the threat actor performed in order to access the victim’s cloudresources.
214: FTP Scanning/Identity Knowledge
215: In one instance, after being evicted from a victim environment, the threat actor began probingexternal services as a means to regain access, initially focusing on (S)FTP servers that wereinternet-accessible.
216: Logs on the servers indicated that the threat actor attempted to log in withmultiple valid accounts and in several cases was successful.
217: There was little to no activityduring the (S)FTP sessions.
218: This likely was an exercise in attempting to identify misconfigured(S)FTP accounts that also had shell access, similar to what’s described in the CredentialHopping section earlier.
219: Some of the accounts used were not in the victim’s Active Directory,as these were accounts for customers of the victim and stored in a separate LDAP database.However, the threat actor had knowledge of these accounts and used them on the correctsystems, which further confirmed that the threat actor had advanced knowledge of the victim’senvironment.
220: After confirming the FTP accounts did not provide shell access into the environment, thethreat actor began attempting to connect into the environment via VPN.
221: The threat actorattempted to log in to the VPN using several user accounts but was prevented fromconnecting, either due to not having the correct password, or due to having the correctpassword but not getting past the recently implemented MFA requirement.
222: Eventually, thethreat actor attempted an account that they had the correct password for but that had not beenset up with MFA.
223: This resulted in a prompt being displayed to the threat actor that included anMFA setup link.
224: The threat actor subsequently set up MFA for the account and successfullyconnected to the victim’s network via VPN.
225: TA Masquerading of System Names
226: During the attempted and successful VPN authentications described above, the threat actorensured the hostname of their system matched the naming convention of hostnames in thevictim’s environment.
227: This again showed a strong knowledge of the victim’s internalenvironment on the part of the threat actor.
228: Not only did the masqueraded hostnames followthe correct naming convention from a broad perspective, they were also valid in terms of whatwould be expected for the user account the threat actor leveraged (i.e., in terms of the sitename and asset type indicated in the hostname).
229: This masqueraded hostname technique hasbeen observed at multiple StellarParticle-related investigations.
230: 13/21
231: Credential Theft Using Get-ADReplAccount
232: In one example, the threat actor connected into the victim’s environment via a VPN endpointthat did not have MFA enabled.
233: Once connected to the VPN, the threat actor connected viaRemote Desktop to a Domain Controller and copied the DSInternals  PowerShell module tothe system.
234: The threat actor subsequently ran the DSInternals command  Get-ADReplAccount  targeting two of the victim’s domains.
235: This command uses the MicrosoftDirectory Replication Service (MS-DRSR) protocol and specifically theIDL_DRSGetNCChanges method to return account information from Active Directory such asthe current NTLM password hashes and previous password hashes used for enforcing11password reuse restrictions.
236: A common name for this particular technique is DCSync.
237: An example output from Get-AdReplAccount is below:
238: 14/21
239: DistinguishedName: CN=TestUser,OU=Admins,OU=Users,DC=demo,DC=local Sid: S-1-5-21-1432446722-301123485-1266542393-2012 Guid: 12321930-7c05-4011-8a3e-e0b9b6e04567 SamAccountName: TestUser SamAccountType: User UserPrincipalName: TestUser@demo.local PrimaryGroupId: 513 SidHistory:  Enabled: True UserAccountControl: NormalAccount AdminCount: True Deleted: False LastLogonDate: 12/2/2021 1:41:46 PM DisplayName: TestUser GivenName: Test Surname: User Description: Admin Account ServicePrincipalName:  SecurityDescriptor: DiscretionaryAclPresent, SystemAclPresent, DiscretionaryAclAutoInherited, SystemAclAutoInherited, DiscretionaryAclProtected, SelfRelative Owner: S-1-5-21-1432446722-301123485-1266542393-512 Secrets  NTHash: 84a058676bb6d7de4237e18f09b91156  LMHash:   NTHashHistory:     Hash 01: 84a058676bb6d7de4237e18f09b91156    Hash 02: e047ebb3b7c463928c928fca95ac0ac8    Hash 03: 6dc3cdb3e559ef00d3521351ace7477e    Hash 04: a88355849f35fe7336de23a4ca3e6a9e    Hash 05: de9bde95677672295349aa6e1e857704  LMHashHistory:     Hash 01: 12227358dd7013c7dbdbd8fdcc0c6668    Hash 02: 6a028636a6f52491424586bb88357f7c    Hash 03: c13ef7347853dc3be7e7259fdc8818a1    Hash 04: 6635151746869ce485246037747adae1    Hash 05: 85543f498b007e07a3da662c8a9d450b  SupplementalCredentials:    ClearText:     NTLMStrongHash: de164e3465f163e846a5e1c22a5ac649    Kerberos:      Credentials:        DES_CBC_MD5          Key: 0013364f00003915        DES_CBC_CRC          Key: 0013364f00003915      OldCredentials:        DES_CBC_MD5          Key: 00002a46000004bc        DES_CBC_CRC          Key: 00002a46000004bc      Salt: demo.localTestUser      Flags: 0    KerberosNew:      Credentials:        AES256_CTS_HMAC_SHA1_96          Key: afd4d60e8d0920bc2f94d551f62f0ea2a17523bf2ff8ffb0fdade2a90389282f          Iterations: 4096        AES128_CTS_HMAC_SHA1_96          Key: f67c2bcbfcfa30fccb36f72dca22a817          Iterations: 4096        DES_CBC_MD5
240: 15/21
241:          Key: 00002f34000004ee          Iterations: 4096        DES_CBC_CRC          Key: 00002f34000004ee          Iterations: 4096      OldCredentials:        AES256_CTS_HMAC_SHA1_96          Key: b430783ab4c957cf6a03d3d348af27264c0d872932650ffca712d9ebcf778b9f          Iterations: 4096        AES128_CTS_HMAC_SHA1_96          Key: dc34bfd5e469edbeada77fac56aa35ae          Iterations: 4096        DES_CBC_MD5          Key: 0000345400000520          Iterations: 4096        DES_CBC_CRC          Key: 0000345400000520          Iterations: 4096      OlderCredentials:        AES256_CTS_HMAC_SHA1_96          Key: 26efd3593712e555f8366bb4b8aff097d09acd93c3a1b6d4ea03c578aad9e087          Iterations: 4096        AES128_CTS_HMAC_SHA1_96          Key: c38dfbd6c00b5f3b010a07f9e824fc38          Iterations: 4096        DES_CBC_MD5          Key: 000039a500000551          Iterations: 4096        DES_CBC_CRC          Key: 000039a500000551          Iterations: 4096      ServiceCredentials:      Salt: demo.localTestUser      DefaultIterationCount: 4096      Flags: 0    WDigest:      Hash 01: 83ed141ab0eaf1ff7694147ba97e1994      Hash 02: e73a8c05d4a7df53774bfa7ef8f0f574      Hash 03: 0c228c5816a79e561d999d489499a12a      Hash 04: 83ed141ab0eaf1ff7694147ba97e1994      Hash 05: e73a8c05d4a7df53774bfa7ef8f0f574      Hash 06: 4e7c5ec6ffb6100f0c7f0bc57749bc93      Hash 07: 83ed141ab0eaf1ff7694147ba97e1994      Hash 08: 10265b08a3bb710da516832eaf64368a      Hash 09: 10265b08a3bb710da516832eaf64368a Key Credentials: Credential Roaming  Created:   Modified:   Credentials:
242: Figure 10.
243: Get-ADReplAccount example output
244: When executing the  Get-ADReplAccount  command, the threat actor specified the ADcontext to be targeted via the NamingContext parameter.
245: This was necessary, as the threatactor was targeting multiple domains.
246: The resulting output of each command was redirected toa text file and compressed as zip archives before exfiltration.
247: 16/21
248: The fact that  Get-ADReplAccount  command includes not only the current NTLM hashes butalso the hash history (i.e., hashes of previous passwords used by a user account) meant thatthe threat actor also had the ability to discover accounts that either reused the samepasswords or used similar passwords when the account password was changed.
249: Credential Refresh
250: On some investigations, the dwell time of the threat actor spanned years.
251: Given this extendedperiod, it is logical to assume that some credentials obtained by the threat actor would berotated during normal business operations.
252: To combat this, the threat actor periodically“refreshed” their credential set by performing credential theft activities in an alreadycompromised environment.
253: At one victim, CrowdStrike identified multiple instances of domaincredential theft months apart, each time with a different credential theft technique.
254: One of the credential theft techniques identified by CrowdStrike was the use of a PowerShellscript to execute Mimikatz in-memory.
255: While in-memory Mimikatz is not particularly unique, thescript executed by the threat actor was heavily obfuscated and encrypted the output usingAES256.
256: CrowdStrike was able to reconstruct the PowerShell script from the PowerShellOperational event log as the script’s execution was logged automatically due to the use ofspecific keywords.
257: CrowdStrike recommends that organizations upgrade PowerShell on theirsystems, as this functionality is only available with PowerShell version 5 and above.
258: In addition to refreshing the threat actor’s credentials, the threat actor would also refresh theirunderstanding of the victim’s AD environment.
259: Around the time when the threat actor executedGet-ADReplAccount , the threat actor also executed a renamed version of AdFind to outputdomain reconnaissance information.
260: In this instance, AdFind was renamed to masquerade asa legitimate Windows binary.
261: The usage of renamed AdFind is consistent with other industryreporting on this campaign.
262: In addition to using scripted commands, operators were repeatedly observed manuallyexecuting several standard PowerShell cmdlets to enumerate network information from AD,including  Get-ADUser  and  Get-ADGroupMember  to query specific members in the directory.This information provided the adversary with a list of accounts possessing particular privileges— in this case, the ability to make VPN connections — that would be subject to later credentialstealing attempts and leveraged to access the victim at a later time.
263: Password Policies/Hygiene
264: In some cases, the threat actor was able to quickly return to the environment and essentiallypick up where they left off, even though the organization had performed an enterprise-widepassword reset, including a reset of all service accounts and the double-reset of the krbtgtaccount.
265: CrowdStrike determined that in these cases, administrative users had “reset” theirown password to the same password they previously used, essentially nullifying the impact ofthe enterprise-wide reset.
266: This was possible even though the customer’s Active Directory wasconfigured to require new passwords to be different from the previous five passwords for agiven account.
267: Unfortunately, this check only applies when a user is changing their passwordvia the “password change” method — but if a “password reset” is performed (changing thepassword without knowing the previous password), this check is bypassed for anadministrative user or a Windows account that has the Reset Password permission on a
268: 17/21
269: 12 Since the  Get-ADReplAccount  cmdlet described above included the
270: user’s account object.NTHashHistory values (i.e., previous password hashes) for user accounts, CrowdStrike wasable to verify that some administrative accounts indeed had the exact same password hashshowing up multiple times in the password history, as well as in the current NTHash value.
271: Close Out
272: The StellarParticle campaign, associated with the COZY BEAR adversary group,demonstrates this threat actor’s extensive knowledge of Windows and Linux operatingsystems, Microsoft Azure, O365, and Active Directory, and their patience and covert skill set tostay undetected for months — and in some cases, years.
273: A special thank you to the CrowdStrike Incident Response and CrowdStrike Intelligence teamsfor helping make this blog possible, especially Ryan McCombs, Ian Barton, Patrick Bennet,Alex Parsons, Christopher Romano, Jackson Roussin and Tom Goldsmith.
274: Endnotes
275: MITRE ATT&CK Framework
276: The following table maps TTPs covered in this article to the MITRE ATT&CK® framework.
277: Tactic
278: Technique
279: Observable
280: CredentialAccess
281: CredentialAccess
282: T1003.006 OSCredentialDumping:DCSync
283: The threat actor obtained Active Directory credentialsthrough domain replication protocols using the Get-ADReplAccount command from DSInternals
284: T1003.001: OSCredentialDumping:LSASSMemory
285: The threat actor used a heavily obfuscated PowerShellscript to execute the Mimikatz commands‘privilege::debug sekurlsa::logonpasswords“lsadump::lsa /patch”‘ in-memory and encrypt theoutput
286: Initial Access /Persistence
287: T1078.003:Valid Accounts:Local Accounts
288: A local account was used by the Threat Actor toestablish a SSH tunnel into the internal networkenvironment
289: The threat actor used VPNs to gain access to systemsand persist in the environment
290: The threat actor exported saved passwords fromuser’s Chrome browser installations
291: Initial Access /Persistence
292: CredentialAccess
293: T1133:ExternalRemoteServices
294: T1555.003:Credentialsfrom PasswordStores:Credentialsfrom WebBrowsers
295: 18/21
296: CredentialAccess
297: LateralMovement
298: Initial Access,Persistence
299: Persistence
300: DefenseEvasion
301: Discovery
302: DefenseEvasion /LateralMovement
303: T1539: StealWeb SessionCookie
304: The threat actor stole web session cookies from enduser workstations and used them to access cloudresources
305: The threat actor used both privileged and non-privileged accounts for RDP throughout theenvironment, depending on the target system
306: T1021.001:RemoteServices:RemoteDesktopProtocol
307: T1078.004:Valid Accounts:CloudAccounts
308: The threat actor used accounts with DelegatedAdministrator rights to access other O365 tenants.
309: TheThreat actor also used valid accounts to createpersistence within the environment.
310: T1546.003:EventTriggeredExecution:WindowsManagementInstrumentationEventSubscription
311: T1036.005:Masquerading:MatchLegitimateName orLocation
312: T1087.002:AccountDiscovery:DomainAccountT1482: DomainTrust Discovery
313: T1069.002:PermissionGroupsDiscovery:DomainGroups
314: T1550.001:Use AlternateAuthenticationMaterial:ApplicationAccess Token
315: TrailBlazer was configured to execute after a rebootvia a command-line event consumer
316: The threat actor renamed their utilities to masqueradeas legitimate system binaries (AdFind as svchost.exe),match the system’s role (GoldMax), or appearlegitimate (TrailBlazer as an apparent Adobe utility).Additionally, the threat actor renamed their systemsprior to connecting to victim’s VPNs to match thevictim’s system naming convention
317: The threat actor used AdFind, standard PowerShellcmdlets, and custom tooling to identify various piecesof information from Active Directory
318: The threat actor used compromised service principalsto make changes to the Office 365 environment.
319: 19/21
320: Collection
321: Persistence
322: Persistence
323: Discovery
324: T1213.
325: : DatafromInformationRepositories:
326: T1098.001:AccountManipulation:AdditionalCloudCredentials
327: T1078.004:Valid Accounts:CloudAccounts
328: T1057:ProcessDiscovery
329: Reconnaissance T1595.001:
330: ActiveScanning:Scanning IPBlocks
331: The threat actor accessed data from InformationRepositories
332: The threat actor added credentials to O365 ServicePrincipals
333: The threat actor created new O365 Service Principalsto maintain access to victim’s environments
334: The threat actor regularly interrogated other systemsusing tasklist.exe
335: The threat actor probed external services in an attemptto regain access to the environment
336: Indicators of Compromise (IOCs)
337: Indicator
338: http://satkas.waw[.
339: ]pl/rainloop/forecast
340: 1326932d63485e299ba8e03bfcd23057f7897c3ae0d26ed1235c4fb108adb105
341: vm-srv-1.gel.ulaval.ca
342: Details
343: TrailBlazerC2
344: TrailBlazerSHA256
345: GoldMax C2
346: 2a3b660e19b56dad92ba45dd164d300e9bd9c3b17736004878f45ee23a0177ac GoldMaxSHA256
347: 156.96.46.116
348: 188.34.185.85
349: 212.103.61.74
350: 192.154.224.126
351: 23.29.115.180
352: TAInfrastructure
353: TAInfrastructure
354: TAInfrastructure
355: TAInfrastructure
356: TAInfrastructure
357: 20/21
358: 104.237.218.74
359: 23.82.128.144
360: Additional Resources
361: TAInfrastructure
362: TAInfrastructure
363: Read about the latest trends in threat hunting and more in the 2021 Threat HuntingReport or simply download the report now.Learn more about Falcon OverWatch proactive managed threat hunting.Watch this video to see how Falcon OverWatch proactively hunts for threats in yourenvironment.Learn more about the CrowdStrike Falcon® platform by visiting the product webpage.Test CrowdStrike next-gen AV for yourself.
364: Start your free trial of Falcon Prevent™today.
365: 21/21